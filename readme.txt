# RPG Game

## Опис гри

Це текстово-графічна RPG гра, де гравець переміщується по кімнатам, бореться з ворогами, отримує досвід і покращує свої навички. Гра створена з використанням бібліотеки `pygame` та бази даних PostgreSQL для збереження прогресу гри.

## Основні функції

1. **Рух гравця:** Гравець може переміщуватися по кімнатам, використовуючи клавіші стрілок або WASD.
2. **Битви з ворогами:** Гравець може вступати в битви з ворогами, завдаючи їм шкоди та отримуючи досвід.
3. **Збереження прогресу:** Прогрес гри зберігається в базі даних, дозволяючи гравцю зберігати свій стан і продовжувати гру пізніше.
4. **Перехід між кімнатами:** Гравець може переходити з однієї кімнати в іншу, створюючи нові кімнати під час гри.
5. **Покращення характеристик:** Гравець може отримувати рівні, покращуючи свої характеристики, такі як атака, захист та здоров'я.

## Опис коду

### Головний файл `game.py`

Цей файл містить основну логіку гри, включаючи ігровий цикл та обробку подій.

- **Клас `Game`:** Основний клас гри, який обробляє основні події, рух гравця, битви та відображення гри.
- **Метод `run`:** Основний ігровий цикл, який обробляє події, малює кімнату та оновлює стан гри.

### Модуль `database.py`

Цей модуль містить функції для роботи з базою даних PostgreSQL.

- **Функція `get_db_connection`:** Повертає з'єднання з базою даних.
- **Функція `get_db_cursor`:** Повертає курсор для виконання SQL-запитів.

### Модуль `world.py`

Цей модуль відповідає за відображення гри, включаючи кімнати, гравців та ворогів

### Клас `Renderer`


- **Метод `draw_room`:** Малює кімнату, стіни, гравців та ворогів на екрані.
- **Метод `draw_player_stats`:** Відображає статистику гравця на екрані.

### Клас `PlayerSprite`

Цей клас обробляє анімації спрайтів гравця.

- **Метод `update_animation`:** Оновлює анімацію залежно від напряму руху гравця.
- **Метод `draw`:** Малює спрайт гравця на екрані.

### Модуль та клас `Battle`

Цей клас обробляє логіку битв між гравцем та ворогами.

- **Метод `update`:** Оновлює стан битви, атакуючи ворогів та гравців.

### Модуль та клас `EndGameHandler`

Цей клас обробляє завершення гри та ситуації поразки гравця.

- **Метод `end_game`:** Викликається при досягненні гравцем максимального рівня.
- **Метод `game_over`:** Викликається при поразці гравця.

### Модуль 'models.py'

### Класи `Room`, `Player`, `Enemy`, `Wall`

Ці класи обробляють логіку кімнат, гравця, ворогів та стін.

- **Клас `Room`:** Обробляє створення та завантаження кімнат з бази даних.
- **Клас `Player`:** Обробляє створення, завантаження та збереження гравця.
- **Клас `Enemy`:** Обробляє створення, завантаження та збереження ворогів.
- **Клас `Wall`:** Обробляє логіку стін у кімнатах.

## Вимоги до системи

- Python 3.8 або вище
- Бібліотека `pygame`
- База даних PostgreSQL
- Встановіть необхідні пакети за допомогою `pip install -r requirements.txt`

## Як запустити гру

1. Клонуйте репозиторій гри на свій комп'ютер.
2. Налаштуйте з'єднання з базою даних у файлі `database.py`.
3. Запустіть гру за допомогою команди `python game.py`.

Майбутні покращення:

- додавання інвентаря
- додавання вікна персонажа
- додавання предметів та валюти
- додавання поселень нпс, торговлі з нпс, квести
- написання сценарію до гри та історії

